Le-Sq_m.py 考察

--以下より実行結果 (mを変化させて実行し、結果をまとめる) ("|"より左の数字は行数であり、実際の実行結果には含まれていない)--

m = 1 の場合
y = -2.81164242424*x^1 + 2.55395333333

m = 2 の場合
y = 1.58166666667*x^2 -4.55147575758*x^1 + 2.90192

m = 3 の場合
y = 0.989355089356*x^3 -0.0507692307699*x^2 -3.79857653458*x^1 + 2.81703333333

m = 4 の場合
y = 8.15559440551*x^4 -16.9529526028*x^3 + 13.0797377621*x^2 -7.387038073*x^1 + 3.09693333333

m = 5 の場合
y = -10.7794871745*x^5 + 37.7991841352*x^4 -46.7762004517*x^3 + 26.4193531405*x^2 -9.92812251621*x^1 + 3.25107999989

m = 10 の場合
y = -1212.31640625*x^10 + 5968.0546875*x^9 -9322.578125*x^8 + 1320.796875*x^7 + 12582.09375*x^6 -16814.359375*x^5 + 10491.5976562*x^4 -3670.50195312*x^3 + 731.885375977*x^2 -80.7303314209*x^1 + 6.03769111633

m = 17 の場合
y = -1105.78125*x^17 + 1220.6875*x^16 + 1208.0*x^15 -1270.1953125*x^14 + 661.40625*x^13 -1190.0625*x^12 -363.375*x^11 + 461.9375*x^10 + 444.25*x^9 + 324.21875*x^8 + 314.125*x^7 -1311.71875*x^6 + 405.125*x^5 + 520.875*x^4 -436.59375*x^3 + 136.32421875*x^2 -22.9072265625*x^1 + 3.72686767578

--以上で実行結果終了--

Graphのフォルダの中に、mを上記の値に設定した際の出力グラフを保存してある。


最小二乗法とは、残差の二乗和が最小になるように各次数の係数を求め、近似などをする方法である。
本問題は、各次数項の係数を行列を用いて求める方法によって計算を行った。

実行結果より、近似多項式は求まっていると考えられる。
また、各出力グラフからも、それぞれ近似多項式は求まっていることがわかる。

m=1のとき、回帰直線は求まっているが、実際のデータに完全にフィットしているとは言えない。
m=2およびm=3のときは、曲線になった為m=1の時よりもフィットしており、より良い近似曲線になっていると考えられる。
m=4およびm=5のときは、データがある範囲内では良い近似曲線になっているが、データの範囲外になると急激に変化してしまっている。
m=10およびm=17のときは、データの点は通っているものの過適合してしまっていると考えられ、データ数に対して項数が多い為、
多項式による曲線の表現が高くなってしまい過学習となってしまっている。
過学習を防ぐためには、正則化した最小二乗法を用いる必要があると考えられる。

