bisection.py 考察

--以下より実行結果1 ("|"より左の数字は行数であり、実際の実行結果には含まれていない)--

  ｜$ python bisection.py 
 0｜--scipy--
 1｜x_0 = 0.0455114681581
 2｜x_1 = 1.9214959284
 3｜x_2 = 6.01340553683
 4｜x_3 = 8.11510125188
 5｜x_4 = 8.90448581473
 6｜time = 0.000284910202026
 7｜--original--
 8｜x_0 = 0.0455114543438
 9｜x_1 = 1.92149594426
10｜x_2 = 6.01340553164
11｜x_3 = 8.11510126293
12｜x_4 = 8.90448579192
13｜time = 0.000261068344116

--以上で実行結果1終了--
--以下より実行結果2--

  ｜$ python bisection.py 
 0｜--scipy--
 1｜x_0 = 0.0455114681581
 2｜x_1 = 1.9214959284
 3｜x_2 = 6.01340553683
 4｜x_3 = 8.11510125188
 5｜x_4 = 8.90448581473
 6｜time = 0.000298023223877
 7｜--original--
 8｜x_0 = 0.0455114681577
 9｜x_1 = 1.9214959284
10｜x_2 = 6.01340553683
11｜x_3 = 8.11510125188
12｜x_4 = 8.90448581473
13｜time = 0.000391006469727

--以上で実行結果2終了--


二分法で非線形方程式の解を求める際、中間値の正負によって計算する為、区間[a,b]をある程度正しく設定する必要があり、aにおける値とbにおける値は
異符合でなければならない。従って、関数の形をある程度予想しておく必要がある。今回の場合5次方程式であるため、5個の解の区間を設定する必要がある。
また、二分法において計算終了の判定は計算回数もしくは許容誤差によって行われる。本課題では区間幅が許容誤差に収まったら計算を終了するように実装した。

実行結果1は許容誤差 1e-7、実行結果2は許容誤差 1e-12 に設定した際の結果である。
各区間は関数のグラフより推定し設定した。
実行結果1ではscipyを用いた場合よりも自作関数で計算した時の方が計算が速いことが読み取れる。しかし、計算結果は多少異なっており、
小数点以下第7位程度からはscipyを用いた結果の方が正しいことがわかる。
実行結果2ではscipyを用いた場合よりも自作関数で計算した時の方が計算速度が遅いことが読み取れる。しかし、許容誤差を小さくした分計算結果の
精度はよくなっており、scipyを用いた場合とほとんど同じ結果となっている。

以上より、自作関数でも問題なく解は得られるが、やはりライブラリを用いた方が正確かつ計算にかかる時間が短いことがわかる。
