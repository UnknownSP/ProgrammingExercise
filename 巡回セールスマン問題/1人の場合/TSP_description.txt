knapsack.py 実行結果

--以下より実行結果 ("|"より左の数字は行数であり、実際の実行結果には含まれていない)--
--また、PulP使用時のStatusも省略してある--

  ｜$ python3 TSP.py
 1｜
 2｜--PulP solve--
 3｜Min Length : 200.45016196060234
 4｜time : 4.733078956604004
 5｜
 6｜--Greedy solve--
 7｜Min Length : 208.1761415165275
 8｜time : 0.0007951259613037109
 9｜
10｜--2 Opt solve--
11｜Min Length : 203.63232974750795
12｜time : 0.0015010833740234375
13｜
14｜--or Opt solve--
15｜Min Length : 201.46462645578507
16｜time : 0.00391387939453125

--以上で実行結果終了--


説明:

1行目から4行目では、各種ライブラリをインポートしている。
6行目から12行目では、今回解くnodeを定義している。
14行目から44行目では、PulPを用いた数理最適化によって解く関数を定義している。
46行目から55行目では、各nodeとnodeの距離を配列で返す関数を定義している。
57行目から63行目では、求まった経路を巡回したときの距離を返す関数を定義している。
65行目から77行目では、貪欲法によって経路を求める関数を定義している。
79行目から102行目では、2-opt法(局所探索法)によって経路を求める関数を定義している。
104行目から134行目では、or-opt法(局所探索法)によって経路を求める関数を定義している。
136行目から164行目では、各方法を用いて経路を求め、その経路を巡回したときの距離と計算にかかった時間を表示している。

実行結果より、最短経路が求められているのはPulpを用いた解法であり、最速で計算できているのは貪欲法による解法であることがわかった。
また、or-opt法と2-opt法は貪欲法で求めた経路を改善しているので、経路が短くなっていることがわかる。
基本的に短い経路を求めようとするほど計算時間がかかることがわかったが、厳密解を求めようとするととても時間がかかると考えられる。
今回は巡回点が37であったので、PulPを用いた解法でも現実的な時間で計算できたが、もっと巡回点が増えるととても現実的な時間で解が求まるとは考えられない。
従って巡回点を増やした場合は、計算アルゴリズムをより最適化するか、or-opt法などを用いて厳密解を求めず近似解で妥協する必要があると考えられる。