1TSP_Compare.py 実行結果

--以下より実行結果 ("|"より左の数字は行数であり、実際の実行結果には含まれていない)--

  ｜$ python 1TSP_Compare.py 
 1｜
 2｜--Nearest Neighber solve--
 3｜Min Length : 208.1761415165275
 4｜time : 0.001180887222290039
 5｜Route : [ 0 23 32 26 36 35 22  5 34 18  8 11 28  1 13 21 24  9  3  7 29 17 16  6
 6｜ 19 31 12 15 10 20 25 33 27 30  2  4 14  0]
 7｜
 8｜--2 Opt solve--
 9｜Min Length : 200.4501619606024
10｜time : 0.030350208282470703
11｜Route : [ 0 23 32 26 36 35 11 28  9  1 13 24 21 18  8 34  5 22  3  7 29 17 16  6
12｜ 19 31 12 15 10 20 25 33 27 30  2  4 14  0]
13｜
14｜--2 Opt solve (vcopt)--
15｜Min Length : 200.4501619606024
16｜time : 1.0907061100006104
17｜Route : [ 0 23 32 26 36 35 11 28  9  1 13 24 21 18  8 34  5 22  3  7 29 17 16  6
18｜ 19 31 12 15 10 20 25 33 27 30  2  4 14  0]

--以上で実行結果終了--


説明:

1行目から3行目では、各種ライブラリをインポートしている。
5行目から11行目では、今回解くnodeを定義している。
13行目から22行目では、各ノード間距離のテーブルを作成する関数を定義している。
24行目から30行目では、求まった経路を巡回したときの距離を返す関数を定義している。
32行目から55行目では、2-opt法によって経路を求める関数を定義している。
57行目から69行目では、NearestNeighber法によって経路を求める関数を定義している。
71行目から73行目では、1人での巡回セールスマン問題を解く際の評価関数を定義している。
｜与えられたノードid配列(0を含まない)の最初に0を付加し、その経路を巡回したときの
｜経路長を返すことで、1人での巡回セールスマン問題の経路長の評価になるように関数を定義している。
75行目から124行目では、各方法を用いて経路を求め、その経路を巡回したときの距離と計算にかかった時間、経路を表示している。

今回はNearestNeighber法(以下、NN法)と、自分で関数を作成した場合の2-opt法(以下、2-opt法1)及びvcoptを用いた2-opt法(以下、2-opt法2)を用いて計算をおこなった。
2-opt法は両方とも10回計算した際の最も良い結果を最終的な結果としている。
実験結果より、NN法が一番計算時間は短かったが、得られた経路長は他より長かった。
また、2-opt法1と2-opt法2は経路長は同じであったが、2-opt法2の方がとても計算時間が長くなった。

NN法が他と比べて一番計算時間が短いのは、計算アルゴリズムがとても単純だからであると考える。しかし、単純がゆえに経路長は長くなってしまっていると考えられる。
2-opt法は、入力する元の経路をランダムに変えて計算することで毎回異なる結果が得られた。これは、2-opt法の場合入力された巡回路を改善して解を求めるので、
解が入力された巡回路に依存することになる為であると考える。
また、2-opt法1よりも2-opt法2の方が計算時間がかかったのは、vcoptは評価関数を変えるだけで汎用的に解けるソルバーとなっているからであり、
2-opt法1は1TSPに特化しているアルゴリズムになっている為計算時間が短くなったと考える。

実行結果(9行目と15行目)及び第10〜12週の巡回セールスマン問題の実行結果より、今回のノード郡での巡回セールスマン問題の最適解は、
約200.45ではないかと考える。